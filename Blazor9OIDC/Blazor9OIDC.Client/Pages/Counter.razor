@page "/counter"
@rendermode InteractiveWebAssembly
@inject IHttpClientFactory ClientFactory


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<p>Render Mode: @(RendererInfo.IsInteractive ? "Interactive" : "Not Interactive") (@RendererInfo.Name)</p>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Claims.AsQueryable().Single(c => c.Type == "name").Value!</p>
        <p>The claims are:</p>
        <ul>
            @foreach(var c in context.User.Claims)
            {
                <li>@c.Type: @c.Value</li>
            }
        </ul>
        <a href="/signout">Logout</a>
    </Authorized>
    <NotAuthorized>
        <a href="/signin">Login</a>
    </NotAuthorized>
</AuthorizeView>

<button class="btn btn-primary" @onclick="CallApi">@message</button>

@code {
    private int currentCount = 0;
    private string? message = "Call API";

    private async Task CallApi()
    {
        var client = ClientFactory.CreateClient("MyApi");
        var result = await client.GetAsync("");
        message = result.Content.ToString();

        //message = await Http.GetStringAsync("api/secureapi");

        /*var result = await TokenProvider.RequestAccessToken();
        if (result.TryGetToken(out var token))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/secureapi");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                message = await response.Content.ReadAsStringAsync();
                // Handle content
            }
        }
        else
        {
            message = "Access token not available.";
        }*/
    }
    
    private void IncrementCount()
    {
        currentCount++;
    }
}
